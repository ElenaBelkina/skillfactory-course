# -*- coding: utf-8 -*-
"""module_0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R_NCtQrUBKEWBbiAPUlvDzZJ9b0YAoad
"""

# coding=utf-8

import random

default_lower_end = 1
default_upper_limit = 100


def try_to_guess(lower_end, upper_limit, mysterious_number, enable_log):
    possible_number = -1
    attempt = 0

    while possible_number != mysterious_number:
        possible_number = lower_end + int((upper_limit - lower_end) / 2)

        if enable_log:
            print ("[{} .. {}], compare possible_number = {} with mysterious_number = {}"
                   .format(lower_end, upper_limit, possible_number, mysterious_number))

        if possible_number < mysterious_number:
            # this happens when range_to number was thought and during previous cycle iteration our search borders
            # had difference in 1, so our possible_number will never be increased due to int rounding
            if possible_number == lower_end:
                # We guessed the mysterious number!
                attempt += 1
                break

            lower_end = possible_number

        elif possible_number > mysterious_number:
            upper_limit = possible_number

        attempt += 1

    # We guessed the mysterious number!
    return attempt


total_attempts = 0
for i in range(default_lower_end, default_upper_limit + 1):
    total_attempts += try_to_guess(default_lower_end, default_upper_limit, i, False)

arithmetical_mean = float(total_attempts) / (default_upper_limit - default_lower_end + 1)
print ("We guess mysterious number average in {} attempts\n".format(arithmetical_mean))

another_mysterious_number = random.randint(default_lower_end, default_upper_limit)
print ("For example, mysterious number {} was guessed in {} attempts"
       .format(another_mysterious_number,
               try_to_guess(default_lower_end, default_upper_limit, another_mysterious_number, True)))